#!/bin/bash

# Funci칩n para verificar si una ventana est치 maximizada en el espacio de trabajo actual
is_workspace_maximized() {
    # Obtener la lista de ventanas en el espacio de trabajo actual
    windows=$(bspc query -N -d focused)
    
    # Verificar si alguna ventana est치 maximizada
    for window in $windows; do
        if bspc query -T -n "$window" | grep -q '"state":"fullscreen"'; then
            return 0  # Ventana maximizada encontrada
        fi
    done
    return 1  # Ninguna ventana maximizada encontrada
}

# Obtener informaci칩n de workspaces y crear un JSON
get_workspace_info() {
    monitor=""
    [ -n "$1" ] && monitor="--monitor $1"
    
    # Almacenar los resultados de bspc para evitar llamadas innecesarias
    desktops=($(bspc query -D --names $monitor))
    focused_desktop=($(bspc query -D -d focused --names $monitor))
    occupied_desktops=($(bspc query -D -d .occupied --names $monitor))
    
    workspaces=()
    
    for d in "${desktops[@]}"; do
        if [[ " ${focused_desktop[@]} " =~ " $d " ]]; then
            class="active"
        elif [[ " ${occupied_desktops[@]} " =~ " $d " ]]; then
            class="inactive"
        else
            class="empty"
        fi

        # Verificar si hay una ventana maximizada en este espacio de trabajo
        if is_workspace_maximized; then
            maximizedwin="true"
        else
            maximizedwin="false"
        fi

        workspaces+=("{\"id\":\"$d\",\"state\":\"$class\",\"maximizedwin\":\"$maximizedwin\"}")
    done

    # Generar JSON
    echo "["$(IFS=','; echo "${workspaces[*]}")"]"
}

# Escuchar cambios en bspwm
bspc subscribe desktop node_transfer | while read -r _ ; do
    workspace_info=$(get_workspace_info)
    eww update workspaces="$workspace_info"
    echo "$workspace_info"
done
