#!/usr/bin/python

import sys, os, json
from subprocess import PIPE, run as bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                                                     #
#        Read, Write and verif json functions         #
#                                                     #
# # # # # # # # # # # # # # # # # # # # # # # # # # # #

def verifJson():
    folder_path = os.path.dirname(jsonPath)

    if not os.path.exists(folder_path):
        os.makedirs(folder_path)

    if not os.path.exists(jsonPath):
        with open(jsonPath, 'w') as file:
            file.write("[]")


def clearJson():
    with open(jsonPath, 'w') as file:
        file.write("[]")

def delJson(notification_id):
    oldData = readJson()
    oldData.sort(key=lambda x: x.get('id'))

    low = 0
    high = len(oldData) - 1

    while low <= high:
        mid = (low + high) // 2
        mid_id = oldData[mid].get('id')

        if mid_id == notification_id:
            break
        elif mid_id < notification_id:
            low = mid + 1
        else:
            high = mid - 1
    else:
        return

    del oldData[mid]

    with open(jsonPath, 'w') as file:
        json.dump(oldData, file)


def readJson(type=None):

    if type == "txt":

        with open(jsonPath, 'r') as file:
            data = file.read()
        return data

    else:
        return json.loads(readJson("txt"))

    

def addJson(data):
    data = json.loads(data)
    oldData = readJson()
    oldData.insert(0, data)
    
    with open(jsonPath, 'w') as file:
        json.dump(oldData, file)


def ewwUpdate(clear=False):
    if clear:
        command = "eww update notifHist=\"[]\""
        bash(command, shell=True)
    else:
        command = f"eww update notifHist=\"$(cat {jsonPath})\""
        bash(command, shell=True)

def main():
    if arg == "--send":
        arg2 = sys.argv[2]
        addJson(arg2)
        ewwUpdate()
       
    elif arg == "--del":
        arg2 = sys.argv[2]
        delJson(arg2)
        ewwUpdate()

    elif arg == "--reload":
        ewwUpdate()
    
    elif arg == "--clear":
        clearJson()
        ewwUpdate(clear=True)

    elif arg == "--read":
        print(readJson("cat"))

    else:
        print("usage: ./script --add {json}")
        print("                --del {id}")
        print("                --clear")
        print("                --read")

jsonPath = os.path.expanduser("~/.cache/eww/oldNotif.json")

if len(sys.argv) > 1:
    arg = sys.argv[1]
else:
    arg = "NULL"

if __name__ == "__main__":

    verifJson()

    main()