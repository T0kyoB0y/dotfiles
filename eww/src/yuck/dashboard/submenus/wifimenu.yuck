
(defwidget wifi_entries []
  
  (scroll
    :width 350
    :height 300
    
    (box
      :orientation "v"
      :space-evenly false
      :hexpand true
      :vexpand true
      :spacing 5
      
      (for wifi in {networkList}
        (wifi_entry
          :BSSID {wifi.BSSID}
          :SSID {wifi.SSID}
          :SIGNAL {wifi.SIGNAL}
          :SECURITY {wifi.SECURITY}
          :CONNECTED {wifi.SSID == networkInfo.wifi.name}
          :CLASS {wifi.CLASS}
          :CHAN_ICON {wifi.ICON.CHAN}
          :SECURITY_ICON {wifi.ICON.SECURITY}
          :SIGNAL_ICON {wifi.ICON.SIGNAL}
        :KNOWN {wifi.KNOWN}
                )
      )
    )
  )
  
)


(defwidget wifi_entry [BSSID SSID SIGNAL SIGNAL_ICON SECURITY SECURITY_ICON CONNECTED CLASS CHAN_ICON KNOWN]
  (eventbox
    :onclick "eww update wifiSelected='${BSSID}'"
    (box
      :space-evenly false
      :class "wifi_entryBox ${wifiSelected == BSSID ? 'selected' : 'unselected'}"
      :orientation "v"
      :spacing 5
      
      (box
        :space-evenly false
        :valign "start"
        :tooltip "
        BSSID: ${BSSID}
        SSID: ${SSID}
        SEC: ${SECURITY}
        "
        (box
          :orientation "v"
          :halign "start"
          :hexpand true
          (box
            :space-evenly false
            :spacing 5
            (label
              :text SSID
              :xalign 0
              :class "SSID"
            )
            (label
              :text CHAN_ICON
              :class "icon CHAN"
              :yalign 0.5
              :valign "center"
            )
          )
          
          (label
            :text SECURITY
            :xalign 0
            :class "SECURITY"
          )
        )
        
        (box
          :space-evenly false
          :spacing 10
          :halign "end"
          :class "iconBox"
          (icon-widget
            :icon {CONNECTED ? "" : SECURITY_ICON}
            :class "SECURITY_ICON icon ${CLASS}"
          )
          (icon-widget
            :icon SIGNAL_ICON
            :halign "end"
            :class "SIGNAL_ICON icon"
          )
        )
      )
      (revealer
        :reveal {wifiSelected == BSSID}
        :transition {wifiSelected == BSSID ? "slideup" : "slidedown"}
        :duration 250
        (box
        :space-evenly false
        :orientation "v"
                (box
          :space-evenly false
          :class "passInputBox"
          :spacing 5
            :visible {!KNOWN}

          (input
            :password wifiPassVisible
            :onaccept "./scripts/python/wifi.py --connect ${SSID} '{}'"
            :hexpand true
            :valign "center"
          )
          (button
            :onclick "./scripts/toggle_var wifiPassVisible"
            :width 20
            :valign "center"
            (label
              :text {wifiPassVisible ? "󰈈" : "󰈉"}
              :class "icon"
            )
          )
        )
        (box
            :space-evenly false
            :visible {KNOWN}    
        (button
        :hexpand true
            :class "button"
            (label
            :text "Forget"
            )
        )
        (button
            :class "button"
            (label
            :text "Connect")
            )
        )
        )
      )
    )
  )
)

